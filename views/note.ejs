<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>note</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+KR&family=Roboto:wght@400;500&display=swap" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  </head>
  <style>
    /* 상단 고정 */
    * {
      font-family: "Noto Serif KR", serif;
      color: #78715e;
    }

    body {
      background-color: #ece8e4;
      position: relative;
    }

    header {
      background-color: #e1ddd6;
      position: fixed;
      z-index: 100;
      height: 40px;
      width: 100%;
    }

    nav {
      background-color: #e1ddd6;
    }

    main {
      min-height: 2000px;
    }

    footer {
      font-size: smaller;
      height: 140px;
      /* background-color: #78715e; */
      text-align: center;
      /* color: whitesmoke; */
    }

    .navbar {
      margin-top: -1%;
      width: 100%;
    }

    /* 변동 */
    .thumbnailBox {
      position: relative;
      top: 80px;
      height: 300px;
      /* border: 1px solid #78715e; */
    }

    .postTitleBox {
      position: relative;
      top: 80px;
      height: 60px;
      border: 1px solid #78715e;
    }

    .ContentBox {
      position: relative;
      top: 80px;
      height: 1000px;
      border: 1px solid #78715e;
    }

    .commentBox {
      position: relative;
      top: 80px;
      height: 500px;
      border: 1px solid #78715e;
    }

    .comment {
      font-weight: bolder;
      font-size: larger;
    }

    .addComment {
      border: 1px solid #78715e;
      color: #78715e;
    }

    .addComment:hover {
      border: 1px solid #78715e;
      background-color: #78715e;
      color: whitesmoke;
    }

    .editOkComment {
      border: 1px solid #78715e;
      background-color: #78715e;
      color: whitesmoke;


      .editOkComment:hover {
        border: 1px solid #78715e;
        color: #78715e;
      }
    }

    .polaroid {
      background: #000;
      /*Change this to a background image or remove*/
      border: solid #fff;
      border-width: 6px 6px 20px 6px;
      box-shadow: 1px 1px 5px #333;
      /* Standard blur at 5px. Increase for more depth */
      -webkit-box-shadow: 1px 1px 5px #333;
      -moz-box-shadow: 1px 1px 5px #333;
      height: 250px;
      /*Set to height of your image or desired div*/
      width: 250px;
      /*Set to width of your image or desired div*/
    }

    .commentTextColor {
      color: #78715e;

    }
  </style>
  <body>
    <!-- ------------header------------ -->
    <header><%- include ('fragment/header') %></header>

    <!-- <header class="my-1">
      <nav class="navbar navbar-light">
        <div class="mx-3 d-flex justify-content-start">
          <a class="navbar-brand" href="#"><img src="/static/logo.png" style="height: 40px" alt="" /></a>
        </div>

        <div class="mx-3 d-flex justify-content-end" id="nav">
          <a class="nav-link me-2" aria-current="page" href="/">Home</a>
          <a class="nav-link me-2" href="/myblog">My blog</a>
          <a class="nav-link me-2" href="/myinfo"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16">
              <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z" />
            </svg></a>
        </div>
      </nav>
    </header> -->
    <!-- ------------main------------ -->
    <main>
      <!-- 썸네일 영역 -->
      <div class="container thumbnailBox mx-auto m-1" id="thumbnailBox">
        <img src="https://i.pinimg.com/originals/c2/63/f2/c263f2141b17304b04b9365f17fcddb4.jpg" class="img-responsive center-block d-block mx-auto polaroid" />

        <!-- ------------게시글 수정 삭제 버튼------------ -->
        <div align="right" id="noteEditButton">
          <button type="button" onclick="myNoteEdit()" class="btn addComment justify-content-end">수정</button>
          <button type="button" onclick="myNoteDelete()" class="btn addComment justify-content-end">삭제</button>
        </div>
      </div>

      <!-- ------------제목 영역------------ -->
      <div class="container postTitleBox mx-auto m-1">
        <h1 class="display-6">제목 빈 값. 틀 고정.글자수 제한</h1>

      </div>
      <!-- ------------게시글 영역------------ -->
      <div class="container ContentBox mx-auto m-1">
        작성된 글 데이터를 가져와야 한다. 근데 글 길이에 따라 달라지니 높이값을
        고정시킬수는 없다. 높이값 제외한
        틀만 잡아놓고 데이터로 넣기
      </div>
      <!-- ------------댓글 영역------------ -->
      <div class="container commentBox mx-auto m-1">
        <div class="mb-3">
          <label for="exampleFormControlTextarea1" class="form-label comment ">Comment</label>
          <!-- table-->
          <table class="table table-hover table-borderless">
            <tbody>
              <tr>
                <!-- <th scope="row"></th> -->
                <td colspan="2">
                  <p class="pb-1 mb-0 small lh-sm">
                    <strong class="d-block ">@username1</strong>
                    Today’s special moments are tomorrow’s memories. - Aladdin(임시댓글)
                  </p>
                  <hr>
                </td>
                <td>02:05</td>
              </tr>

              <tr>
                <!-- <th scope="row"></th> -->
                <td colspan="2">
                  <p class="pb-1 mb-0 small lh-sm">
                    <strong class="d-block ">@username2</strong>
                    You cannot be happy every day. But there are happy things every day. - Winnie the Pooh(임시댓글)
                  </p>
                  <hr>
                </td>
                <td>02:05</td>

              </tr>

            </tbody>
          </table>
          <form name="inputComment">
            <textarea class="form-control" id="commentTextarea" rows="3" name="comment" placeholder="댓글을 작성해주세요."></textarea>
        </div>

        <div align="right">
          <div id="noComment"></div>
          <button type="button" onclick="addComment()" class="btn addComment justify-content-end" id="commentTextareaBtn">작성</button>
        </div>
        </form>
      </div>

    </main>
    <!-- ------------footer------------ -->

    <footer><%- include ('fragment/footer') %></footer>
    <!-- <span style="color: whitesmoke">
        <br />
        &nbsp; non-blogging <br />
        &nbsp; 사업자등록번호 : 000-00-00000<br />
        &nbsp; 주소 : 서울특별시 용산구 한강로 <br />
        &nbsp; 대표번호: 1644-0000<br />
        &nbsp; Copyright(c) 2023 non-blogging. All Rights Reserved.
      </span> -->

    <!-- ------------script------------ -->
    <script>
      //--------------------썸네일 넣고 빼기 
      const thumbnailBox = document.getElementById("thumbnailBox")

      //이미지 안받아왔다면? (임시) ^^
      // let imageId = "";

      // if (!imageId) {
      //   thumbnailBox.style.display = "none";
      // } else if (imageId) {
      //   thumbnailBox.style.display = "block";
      // }

      //--------------------댓글 작성 시간 가져오기
      function getNowTime() {
        let now = new Date();
        let hours = now.getHours();
        let minutes = now.getMinutes();

        // Add leading zeros if necessary
        hours = (hours < 10 ? "0" : "") + hours;
        minutes = (minutes < 10 ? "0" : "") + minutes;

        return hours + ":" + minutes;
      }
      //--------------------댓글 작성 시 랜덤 아이디값 주기

      function randomCommentId() {
        const timestamp = new Date().getTime();
        const randomNumber = Math.floor(Math.random() * 1000000);

        return `${timestamp}_${randomNumber}`;
      }
      //--------------------댓글 등록
      function addComment() {
        let commentText = document.getElementById("commentTextarea").value;

        //작성된 내용 없으면 false값 내보내서 작성 안되게 하기
        let textElement = document.getElementById("noComment");
        if (commentText.trim() === "") {
          // Display a message prompting the user to enter a comment
          textElement.textContent = "작성된 내용이 없습니다.😅";
          return false;
        } else {
          // Clear the message
          textElement.textContent = "";
        }

        //테이블 행 추가
        let newRow = document.createElement("tr");

        let td1 = document.createElement("td");
        td1.setAttribute("colSpan", "2");
        let td2 = document.createElement("td");

        let commentParagraph = document.createElement("p");

        let strongUsername = document.createElement("p");
        strongUsername.classList.add("d-bock");

        commentParagraph.appendChild(strongUsername);
        commentParagraph.appendChild(document.createTextNode(commentText));

        td1.appendChild(commentParagraph);

        const randomId = randomCommentId()

        td1.innerHTML = `<p class = "commentText pb-1 mb-0 small lh-sm" id= "${randomId}">${commentText}</p> <hr/>`
        td1.prepend(strongUsername);
        strongUsername.innerText = "nickname"; //어떻게 가져오지^^ 로컬에 저장된 유저의 닉네임..

        const getTime = getNowTime();
        td2.innerHTML = `${getTime} <button type="button" onclick="editComment()" id="editCommentBtn" class="btn addComment justify-content-end showCommentEditBtn">수정</button><button type="button" onclick="deleteComment()" id="deleteCommentBtn" class="btn addComment justify-content-end showCommentEditBtn">삭제</button>`

        newRow.appendChild(td1);
        newRow.appendChild(td2);

        let commentTableBox = document.querySelector("tbody");
        commentTableBox.appendChild(newRow);

        //작성된 내용 지우기
        document.getElementById("commentTextarea").value = "";

        //axios 작성한 댓글 데이터 보내기 (userId 아직 ^^ 로컬에 저장된 아이디와 비교?)
        //댓글 작성한 데이터는 담겨짐.
        const commentWrite = `${commentText}`
        const commentId = `${randomId}`

        const data = {
          commentWrite,
          commentId
        }
        console.log("댓글등록 data", data)

        axios({
            method: "post",
            url: "/notebook/:noteId/comment",
            data: data

          }).then((result) => {
            console.log("댓글작성 axios result", result);
          })
          .catch((err) => {
            console.log("댓글작성 axios err", err);
          });


      }

      //--------------------댓글 삭제 (본인 댓글만 삭제할 수 있어야 하니 user id 값에 따라 삭제 버튼 안보이도록.)
      //얘는 노트아이디랑은 별개. 댓글 자체의 아이디.
      //user가 해당 댓글의 id값을 가지고 있는지에 따라 판단? 
      //각 댓글의 id값을 login한 user가 가지고 있느다면 삭제 버튼이 보여야한다; 
      //로그인한 유저(로그인한 값이 null이 아니면서)이면서 + 댓글작성자의 idr가 같아야 한다.
      //그럼 댓글 작성하면서 로그인한 userId값을 보내야한다?
      //댓글 작성하면서 로그인한 본이 id를 같이 보내야하네
      function deleteComment() {
        let commentTableBox = document.querySelector("tbody");

        commentTableBox.addEventListener("click", async function(event) {
          if (event.target.id === "deleteCommentBtn") {
            let userConfirmed = window.confirm("정말 삭제하시겠습니까??");

            if (userConfirmed) {
              let findRow = event.target.closest('tr');
              if (findRow) {
                let commentIdElement = findRow.querySelector('.commentText');
                let commentId = commentIdElement ? commentIdElement.id : "";
                let commentText = commentIdElement ? commentIdElement.textContent : "";

                if (!commentId || !commentText) {
                  console.error("Error: CommentId or CommentText not found.");
                  return;
                }

                findRow.remove();

                console.log("삭제 data:", {
                  commentText: commentText,
                  commentId: commentId
                });

                try {
                  let result = await axios.delete(`/notebook/${noteId}/comment/${commentId}`, {
                    data: {
                      commentText: commentText,
                      commentId: commentId
                    }
                  });

                  console.log("댓글삭제 axios result", result);
                } catch (err) {
                  console.log("댓글삭제 axios err", err);
                }
              }
            }
          }
        }, {
          once: true
        });
      }

      //--------------------댓글 수정 (본인 댓글만 수정할 수 있어야 하니 user id 값에 따라 삭제 버튼 안보이도록.)

      function editComment() {
        let editButton = document.querySelectorAll("#editCommentBtn");
        editButton.forEach(function(editBtn) {
          editBtn.addEventListener("click", function() {
            commentParagraph = this.parentNode.parentNode.querySelector(".commentText");
            // console.log("commentParagraph???", commentParagraph.textContent)

            let editTextarea = document.createElement("textarea");
            editTextarea.classList.add("form-control");
            commentParagraph.appendChild(editTextarea);
            editTextarea.value = commentParagraph.textContent;
            //작성한 값으로 변경
            commentParagraph.parentNode.replaceChild(editTextarea, commentParagraph);

            //수정완료 버튼 추가
            let saveButton = document.createElement("button");
            this.parentNode.appendChild(saveButton);
            saveButton.textContent = "수정 완료";
            saveButton.classList.add("btn", "save-comment", "editOkComment");

            //수정완료 버튼 이벤트
            saveButton.addEventListener("click", function() {
              saveEditedComment(editTextarea, commentParagraph);
            });

            //댓글 수정 버튼 클릭 이벤트
            function saveEditedComment(editTextarea, commentParagraph) {
              let editedText = editTextarea.value;

              let addNewComment = document.createElement("p");
              addNewComment.classList.add("commentText", "pb-1", "mb-0", "small", "lh-sm");
              const randomId = randomCommentId()
              addNewComment.id = `${randomId}`;
              newRandomId = addNewComment.id;

              addNewComment.appendChild(document.createTextNode(editedText));

              console.log("수정된 댓글:", editedText);
              console.log("수정된 랜덤아이디값:", newRandomId);

              editTextarea.parentNode.replaceChild(addNewComment, editTextarea);
              saveButton.remove();

              axios.patch("/notebook/:noteId/comment/:commentId", {
                  editedText: editedText,
                  newRandomId: newRandomId
                })
                .then((result) => {
                  console.log("댓글수정 patch result", result);
                })
                .catch((err) => {
                  console.log("댓글수정 patch err", err);
                });



            }
          })
        })
      };
      //--------------------댓글 수정 삭제 버튼 visibility
      //user가 작성한 댓글에 있는 commentId 유무에 따라.
      //*user가 해당 commentId를 가지고 있느냐 없느냐.
      //commentId는 댓글아이디, userId는 로그인한유저아이디

      // let commentId = "writer1"
      // let userId = "writer1"

      function commentEditBtnShow(commentId, userId) {
        const showCommentEditBtn = document.getElementsByClassName("showCommentEditBtn")

        if (userId) {
          if (commentId === userId) {
            showCommentEditBtn.style.visibility = "visible";
          } else {
            showCommentEditBtn.style.visibility = "hidden";
          }
        }
      }
      commentEditBtnShow("writer1", "writer3")

      //--------------------게시글 수정 삭제 버튼 visibility
      //user가 작성한 노트에 있는 noteId 유무에 따라.
      //*user가 해당 noteId를 가지고 있느냐 없느냐.
      //noteId는 게시글아이디, useId는 로그인한유저아이디
      // let useId = "hi"
      // let noteId = "hi"

      function noteEditBtnShow(noteId, useId) {
        const showEditBrn = document.getElementById("noteEditButton")
        console.log("showEditBrn", showEditBrn)

        if (useId) {
          if (noteId === useId) {
            showEditBrn.style.visibility = "visible";
          } else {
            showEditBrn.style.visibility = "hidden";
          }
        }
      }
      noteEditBtnShow("hi", "hi")

      //-------------------------------------게시글 수정 버튼
      //유저가 작성한 데이터 값 어떻게 가져오지? ^^
      //페이지에 저장된 내용 그대로 가져와야한다.
      function myNoteEdit() {
        location.href = "/notebook/write";
      }

      //-------------------------------------게시글 삭제 버튼
      function myNoteDelete() {
        if (window.confirm("정말 삭제하시겠습니까??")) {
          location.href = "/notebook";
        } else {
          return false;
        }
      }
    </script>
  </body>
</html>